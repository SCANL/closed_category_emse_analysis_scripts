name	context	language	grammar pattern	split	Eman's Notes	Christian's notes	final_axial_code	Eman's Validation	Count			Syreen's Review	
_before_major	ATTRIBUTE	C++	P N	before major	The struct holds the state of an obsolete name along with the versioning information, ObsoleteName is an entity-like structure that stores a name and version constraints	This variable is part of a struct that holds the state of an obsolete name along with the versioning information. The variable, before_major, represents the major version of a BAM file and is used to denote a version number preceding a major update or change in the BAM file format. It conveys that that version of the current object is prior to a significant (major) version.	Position / Ordering in Time or Space	TRUE	76	TRUE	_before_major	Agree	
_before_minor	ATTRIBUTE	C++	P N	before minor	The struct holds the state of an obsolete name along with the versioning information, ObsoleteName is an entity-like structure that stores a name and version constraints	This variable is part of a struct that holds the state of an obsolete name along with the versioning information. The variable, before_minor, represents the minor version of a BAM file and is used to denote a version number preceding a minor update or change in the BAM file format. It conveys that that version of the current object is prior to a minor version.	Position / Ordering in Time or Space	TRUE	76	TRUE	_before_minor	Agree	
_from	PARAMETER	C++	P	from	represents a source path in various functions	This variable represents a source path in various functions. The use of 'from' specifies a source, but is not very descriptive beyond that.	Data Source / Origin	TRUE	10	TRUE	_from	Agree	
_look_at	ATTRIBUTE	C++	V P	look at	an entity in the context of 3D graphics.	This variable encodes a target point. It helps define the orientation of a camera per face of the cube map, which is helpful for rendering in certain 3d use cases. The use of 'at' indicates that there is a position or point in space that is of interest. This variable actually represents a point in space that should be looked at, and is passed to another function called look_at as the point of interest (e.g., look_at(_look_at)). Thus, this term is overloaded in strange ways. Even so, this is a dangling preposition.	Position / Ordering in Time or Space	TRUE	11	TRUE	_look_at	Agree	
_up	ATTRIBUTE	C++	P	up		This variable is a vector that represents the up direction in a 3D rendering context. The use of 'up' is being used to literally refer to the idea of an upward direction, and represents a position or direction in 3d space	Position / Ordering in Time or Space	TRUE	10	TRUE	_up	Agree	
aboveBase	PARAMETER	C++	P N	above Base	It performs decoding of an indexed header field.	this variable is a boolean flag that indicates whether the header field being decoded has an index above the current base value. It helps determine if the index should be interpreted relative to the current base or absolute value. The wor d"above" conveys that the index in question is positioned higher than the base reference point.	Boolean Flow / Control Flag	TRUE	76	TRUE	aboveBase	Agree	
add_before_forward	FUNCTION	C++	V P N	add before forward	adding a callback to before_forward_	This variable represents a function that adds callbacks before a forward pass. The word 'before' helps us understand the temporal semantics of the execution; the callback will be invoked before the forward pass, so it conveys an execution timing.	Position / Ordering in Time or Space	TRUE	15	TRUE	add_before_forward	Agree	
adjust_to_camera	FUNCTION	C++	V P N	adjust to camera	adjusting fog parameters based on the camera’s transformation	This variable is a function that is called to help in adjusting fog parameters based on the camera’s positioning. The word 'to' helps us understand that this is a transformation, or a reposition (which is a transformation due to the mathematics involved), to modify this object's configuration so that it is appropriate/aligned with the camera's position and orientation.	Position / Ordering in Time or Space	TRUE	15	TRUE	adjust_to_camera	Agree	
after	DECLARATION	Java	P	after		This variable holds the memory usage measurement taken after a spill operation. It communicates a temporal ordering by its name, as well as positioning in the code (there's another variable, before, that allocates before the spill. After comes after before within the code). This is arguably maybe a noun, but it still behaves like a preposition.	Position / Ordering in Time or Space	TRUE	10	TRUE	after	Agree	
after_handle	DECLARATION	C	P N	after handle	It modifies the HTTP response	This variable is a function that runs after handling a request. It modifies the response header with some cookie information.	Position / Ordering in Time or Space	TRUE	76	TRUE	after_handle	Agree	
after_handle	FUNCTION	C	P V	after handle	modifies the response object	This variable is a function that is invoked after a request handler runs, allowing middleware to post-process the response. The use of 'after' indicates a temporal ordering constraint. It runs after main request handling is done.	Position / Ordering in Time or Space	TRUE	14	TRUE	after_handle	Agree	
after_release	ATTRIBUTE	C	P N	after release	Tracks whether the PDU occurs after stopping	This variable specifies the time, in milliseconds, to retain the protocol Data Unit (PDU( after its been released. This allows MATE to analyze and correlate PDUs even after release. The word, after, indicates that the specified time duration pertains to the period following the release of the PDU-- it remains relevant for analysis for a time after its release.	Position / Ordering in Time or Space	TRUE	76	TRUE	after_release	Agree	
afterEquals	DECLARATION	Java	P N	after Equals	Tracks the parsing state of the SQL string	This variable represents the state of parsing an SQL string. If the string contains equals, then this variable, which is a boolean, will become true after the equals int hat string has been scanned by the for loop that is analyzing the sql string.	Boolean Flow / Control Flag	TRUE	76	TRUE	afterEquals	Agree	
afterFirstBatch	ATTRIBUTE	Java	P NM N	after First Batch	keeps track of whether the first batch has been processed	This variable keeps track of whether the first batch has been processed. It helps the system skip spurious empty patches (with zero rows and null data) other than the first one. So 'after' helps specify a time, or point, during processing when the first batch has been processed.	Position / Ordering in Time or Space	TRUE	32	TRUE	afterFirstBatch	Agree	
afterLastRow	ATTRIBUTE	Java	P NM N	after Last Row	keeps track of whether the cursor has moved past the last record in the dataset	This variable is a boolean that keeps track of whether the cursor has moved past the last record in the dataset. The word 'after' helps specify a time, or point, during processing when the last row has been processed.	Boolean Flow / Control Flag	TRUE	32	TRUE	afterLastRow	Agree	
afterProcessing	ATTRIBUTE	Java	P V	after Processing	holds instances that persist across processing stages	This variable holds a map of tasks that should be executing after the processing phase is complete. The word 'after' marks a temporal order. This map is relevant after some event has occurred-- after processing has ended.	Position / Ordering in Time or Space	TRUE	14	TRUE	afterProcessing	Agree	
afterRound	ATTRIBUTE	Java	P N	after Round		This variable represents tasks that will be executing after a processing around completes.	Position / Ordering in Time or Space	TRUE	76	TRUE	afterRound	Agree	
among	PARAMETER	C++	P	among	selecting random vertices	This variable is an array of candidates element from which random selections are made. It acts as a selection pool-- the group within which selection will occur. The use of 'among' indicates group membership or selection or filtering. It helps indicate that everything in  the among array is a candidate fo selection. Since it's alone, it looks a lot like a noun, but still acts like a preposition	Membership / Peer Grouping	TRUE	10	TRUE	among	Agree	
andFilterAtIndex	FUNCTION	Java	NM N P N	and Filter At Index	combining two filters into a single DruidAndFilter	This variable is a function that constructs a logical AND filter from two DruidFilter objects, probably as part of a filter composition at a sepcific index or stage in query planning. The use of 'at' specifies a position or location within the data structure.	Position / Ordering in Time or Space	TRUE	9	TRUE	andFilterAtIndex	Agree	
as_array_parameter	FUNCTION	C++	P NM N	as array parameter	returns a reference (this) to the object	This variable indicates that this object is an array parameter, and returns a pointer to itself cast as DCArrayParameter. In polymorphic code, this helps test if the object actually is an array parameter. The 'as' reflects role transformation rather than data conversion. Viewing or interpreting the object in a different type context. 'Treat this obejct as an array parameter, if possible'	Type Casting / Interpretation	TRUE	32	TRUE	as_array_parameter	Agree	
as_binary	ATTRIBUTE	C	P N	as binary	Tracks whether a value is treated as binary	this variable is an integer that serves as a boolean flag used when GLPK is parsing parameter statements. It is used to indicate that the parameter being parsed should be interpreted as binary	Type Casting / Interpretation	TRUE	76	TRUE	as_binary	Disagree	Boolean Flow / Control Flag
as_bounding_box	FUNCTION	C++	P NM N	as bounding box	provides a reference to the object if it is of type BoundingBox	This variable is a function that helps with casting (object conversion). In essence, it allows the code to check and reinterpret subclasses during runtime. The word 'as' indicates the interpretation or view of the object as a specific thing, in this case a bounding_box.	Type Casting / Interpretation	TRUE	32	TRUE	as_bounding_box	Agree	
as_field	FUNCTION	C++	P N	as field	Maintains object identity within a type hierarchy	this variable is a function that allows the calling object to be treated or referenced explictly as a DCField. The preposition, as, conveys that the function provides an interpretation of the current object in the capactiy of a DCField.	Type Casting / Interpretation	TRUE	76	TRUE	as_field	Agree	
as_file	PARAMETER	C	P N	as file	Tracks file-related content initializatio	This variable represents a pointer to the a git_diff_file struct. It represents a destination structure to store information derived from a blob or a buffer. The name implies that it represents a struct into which the function converts or interprets source content. This is supported by the name of the function it appears within, which specifies that this git_diff_file_content is being interpreted from_src. So it represents interpreting src as git_diff_file	Type Casting / Interpretation	TRUE	76	TRUE	as_file	Agree	
as_function_type	FUNCTION	C++	P NM N	as function type	provides a reference to the underlying actual type if it is a CPPFunctionType	This function provides a reference to the underlying actual type if it is a CPPFunctionType. It returns nullptr if the actual_type is null. The use of 'as' indicates interpretation or view of the calling object as a particular data type.	Type Casting / Interpretation	TRUE	32	TRUE	as_function_type	Agree	
as_molecular_field	FUNCTION	C++	P NM N	as molecular field	return a pointer to the object if it is a DCMolecularField	This function helps with casting an object, allowing the code to check and reinterpret subclasses during runtime. The word 'as' indicates the act of interpreting or viewing the object as a particular data type.	Type Casting / Interpretation	TRUE	32	TRUE	as_molecular_field	Agree	
as_pointer	FUNCTION	C++	P N	as pointer	Tracks _type to determine how to interpret _u	This variable represents a function that (re)interprets the calling object as different types of pointers depending on the type of the object that calls it. The use of 'as' in this case is specifying how the calling object is interpereted, and since this function provides sveral options via switch..case, there are differen interpretations that could be taken based on the characteristis of the calling object	Type Casting / Interpretation	TRUE	76	TRUE	as_pointer	Agree	
as_simple_parameter	FUNCTION	C++	P NM N	as simple parameter	return a pointer to DCSimpleParameter if the object is of that type	This variable is a function that returns a pointer to DCSimpleParameter if the object is of that type. It alows the code to check and reinterpret subclasses during runtime, returning nullptr if it cannot be cast. The use of 'as' indicates interpretation or view of the calling object as a particular data type.	Type Casting / Interpretation	TRUE	32	TRUE	as_simple_parameter	Agree	
as_warning	PARAMETER	C	P N	as warning	Conditional Behavior Modifier	This variable represents a boolean that is used to determine how a problem/error message should be generated. If it's true, the message is generated as a warning, otherwise, it's an error.	Type Casting / Interpretation	also boolean flow / control flag?	76	TRUE	as_warning	Disagree	Boolean Flow / Control Flag
asArray	ATTRIBUTE	Java	P N	as Array	Tracks whether the log data should be treated as an array	This variable is a booolean that helps determine if the columns of a given object should be written as an array. If it's true, the ColumnsArrayWriter function is invoked. Otherwise, the ScalarGroupWriter is invoked.	Type Casting / Interpretation	also boolean flow / control flag?	76	TRUE	asArray	Disagree	Boolean Flow / Control Flag
asCaching	FUNCTION	Java	P V	as Caching	ensures efficient storage and retrieval of elements	This variable is a static conversion method. If the element is already a caching wrapper, return it. Otherwise, wrap it in a Caching object. The use of 'as' signals that this is an interpreation of an object, and in this case it is enhancing or adding to the object in some way. This could also be considered a different view of an object.	Type Casting / Interpretation	TRUE	14	TRUE	asCaching	Agree	
asCString	FUNCTION	C++	P NM N	as C String	retrieves a c-string representation of the stored value	This variable represents a function that return a c-string representation of the stored value. It is a reinterpretation or acess of the underlying, internal representation. It gives direct access to the char pointer. The use of 'as' represents reinterpretation or access, since in this case it is primarily stripping away the rest of the object and returning he CString.	Type Casting / Interpretation	TRUE	32	TRUE	asCString	Agree	
asDiamond	DECLARATION	Java	P N	as Diamond	Applies a transformation to an object for display or processing	This variable is a lambda function that transforms an input object into a generic type parameter representation. If noDiamonds() is true, it wraps the input in angle brackets <>. Otherwise, it returns empty angle brackets<>. It uses 'as' since its goal is to allow an object (likely a type) to be formatted/interpreted in as a generic declaration (using the diamond syntax)	Type Casting / Interpretation	boolean flow / control flag?	76	TRUE	asDiamond	Agree	
asDouble	FUNCTION	Java	P N	as Double	Tracks data type conversion from float to double	This variable represents a function that interprets the calling object as a double by calling functions to convert to doubles.	Type Casting / Interpretation	TRUE	76	TRUE	asDouble	Agree	
asFunction	ATTRIBUTE	Java	P N	as Function	Not sure	This variable is a function that invokes escape(string) on the calling object. It is called asFunction because it is a transformation/interpretation of the Escaper class as a function, allowing the calling to retrieve asFunction() and use it in functional programming contexts.	Type Casting / Interpretation	TRUE	76	TRUE	asFunction	Agree	
asInt64	FUNCTION	C++	P N	as Int64		This variable is a function that interprets the calling object (or some attribute of it) as a 64 bit integer. It uses the word 'as' to indicate this idea of (re)interpretation	Type Casting / Interpretation	TRUE	76	TRUE	asInt64	Agree	
asLong	DECLARATION	Java	P N	as Long		This variable is a long that has been interpreted from an integer using an int mask that likely masks the sign bit in the integer to make it an unsigned long. The use of 'as' indicates the (re)interpretation of the integer to a long	Type Casting / Interpretation	TRUE	76	TRUE	asLong	Agree	
asMap	FUNCTION	Java	P N	as Map		This variable is a function forces the current data type to be interpreted as a map. The use of 'as' indicates the (re)interpretation of the calling object into a map data structure.	Type Casting / Interpretation	TRUE	76	TRUE	asMap	Agree	
asSortedEntryList	FUNCTION	Java	P NM NM N	as Sorted Entry List	sorting a list of entries based on the count of the Counter objects	This variable is a function that sorts a list of entries and returns them. It essentially sorts the map attribute of the calling object. The use of 'as' indicates a view of the data (i.e., as sorted instead of unsorted).	Type Casting / Interpretation	TRUE	8	TRUE	asSortedEntryList	Agree	
asString	DECLARATION	Java	P N	as String		This variable is a string that has been constructed by transforming a set object into a string format. The use of 'as' indicates the reinterpretation/transformation of the set into a string format.	Type Casting / Interpretation	TRUE	76	TRUE	asString	Agree	
asTransformGeneratorTransform	FUNCTION	Java	P NM NM N	as Transform Generator Transform	transforms a given TransformGenerator value	This variable is part of a deferred transformation process. Type inference is performed first, and only after variable declarations are fully resolved, expressions like transform are interpreted. This variable tells us to take a raw expression and interpret it in the role of the transform expression in a transformGenerator construct. The use of 'as' indicates a view or reinterpretation of the data.	Type Casting / Interpretation	TRUE	8	TRUE	asTransformGeneratorTransform	Agree	
asV	DECLARATION	Java	P N	as V		This variable represents a conversion/reinterpratation from object to type V, which may be some sort of generic type. It stands for value.	Type Casting / Interpretation	TRUE	76	TRUE	asV	Agree	
asVar	FUNCTION	C++	P N	as Var		This variable is a function that likely represents the conversion of the calling object to Var	Type Casting / Interpretation	TRUE	76	TRUE	asVar	Agree	
asWriter	FUNCTION	Java	P N	as Writer		This variable is a function that explict converts the 'target' parameter to a type of writer.	Type Casting / Interpretation	TRUE	76	TRUE	asWriter	Agree	
before	DECLARATION	Java	P	before		This variable holds the memory usage measurement taken before a spill operation. It communicates a temporal ordering by its name, as well as positioning in the code (there's another variable, after, that allocates after the spill. Before comes before after within the code). This is arguably maybe a noun, but it still behaves like a preposition.	Position / Ordering in Time or Space	TRUE	10	TRUE	before	Agree	
beforeExecute	FUNCTION	Java	P V	before Execute	procedural step that prepares the system for execution	This variable is a function that handles things that must happen before the execute function begins processing files. The use of 'before' indicates a temporal relationship where it contains actions that have to be taken temporally before another set of actions.	Position / Ordering in Time or Space	TRUE	14	TRUE	beforeExecute	Agree	
behind_rem_start	DECLARATION	C++	P NM N	behind rem start	represents a calculated offset for the remaining untreated area after upload operation	This variable represents a calculated offset for the remaining untreated area after upload operation. It pinpoints any untreated data that comes after the boundary-aligned upload range. The use of 'behind' indicates a spatial sense of file/data layout, indicating something that lies after the current region.	Position / Ordering in Time or Space	TRUE	32	TRUE	behind_rem_start	Agree	
behind_size	PARAMETER	C++	P N	behind size	used to track the size of a segment being processed	this variable is used to track the size of a segment being processed. It contrasts with another variable that uses the word front, indicating that behind is a reference to the position of some data within the untreated_list data structure	Position / Ordering in Time or Space	TRUE	76	TRUE	behind_size	Agree	
behind_start	PARAMETER	C++	P N	behind start	represents the starting position of a segment being processed	this variable is used to represent the starting position of a segment being processed. It contrasts with another variable that uses the word front, indicating that behind is a reference to the position of some data within the untreated_list data structure	Position / Ordering in Time or Space	TRUE	76	TRUE	behind_start	Agree	
buffer_as_string	ATTRIBUTE	C	N P N	buffer as string	refers to a buffer, seems to an entity in the program	This variable is a c-string representation of the buffer. The use of 'as' indicates an interpretation or transformation of an entity to whatever it is to be represented as, in this case it's a c-string.	Type Casting / Interpretation	TRUE	16	TRUE	buffer_as_string	Agree	
commit_on_success	PARAMETER	C	V P N	commit on success	influences the execution path of the merge process	This variable helps control whether a merge commit should be created only if the merge completes without conflicts. The use of 'on' indicates that this is a guard condition, and conveys if-statement logic of only performing an action if there is a success.	Event Callback / Trigger	TRUE	15	TRUE	commit_on_success	Agree	
conditional_match_onbranch	FUNCTION	C	NM N P N	conditional match on branch	checking whether the condition matches a branch in a repository	This variable is a function that checks whetehr a given condition matches the current Git branch name, based on the repo' symbolic HEAD reference. The use of 'on' specifies that we should match the condition based on the branch (or applied to the branch), so 'on' is giving us a target or a context for the match	Event Callback / Trigger	TRUE	9	TRUE	conditional_match_onbranch	Agree	
down_time	ATTRIBUTE	C	P N	down time	track of when a key press event occurs	This vairable keeps track of when a key press event occurs and specifically measures the amount of time that a key depressed (pushed down)	Other / Miscellaneous	TRUE	76	TRUE	down_time	Agree	
end_of_record	FUNCTION	C	N P N	end of record	operates on character pointers, which reference entities in memory	This variable is a function that finds the end of a packed-ref record. The word 'of' helps contextualize what 'end' refers to. Specifically, the record.	Position / Ordering in Time or Space	TRUE	16	TRUE	end_of_record	Agree	
extend_by_hexahedron	FUNCTION	C++	V P N	extend by hexahedron		This variable represents a function that incorporates the geometry of a Bounding Hexahedron into the current bounding volume (it spands the volume to enclose this shape). The use of 'by' helps specify that the hexahedron is the operand being used to update the state of the current object. It is helping to specify an operative mechanism or a "way in which" something should be done.	Operation Basis / Strategy	TRUE	15	TRUE	extend_by_hexahedron	Agree	
flag_within	ATTRIBUTE	C	N P	flag within	tracks whether a commit is within a specific set of conditions	This variable tracks whether a commit is within a specific set of conditions. It marks nodes that are within a certain context (ancestry, path, etc). Within is a spatial/directional preposition that indicates containment or membership to a data structure.	Location-Bound Membership	TRUE	11	TRUE	flag_within	Agree	
for_avg	DECLARATION	C++	P N	for avg	accumulates updates across iterations, it maintains a state.	Thisv accumulates updates across iterations; it stores intermediate updates for model training, and is used to compute averaged weights over iterations. The use of 'for' is to clue the reader in the purpose of this variable (i.e., it is for computing averages).	Purpose / Role Annotation	TRUE	76	TRUE	for_avg	Agree	
forBackprop	PARAMETER	Java	P N	for Backprop	check if certain operations will be executed	This is a boolean variable that only allows the code in its associated if statement to be executed when it is true. It is used to indicate when this function is being called for the purposes of back propagation in the process of training a neural network. The use of 'for' clues the reader in on the purpose of the variable and assocaited code (i.e., it is to be used during backgprop)	Boolean Flow / Control Flag	TRUE	76	TRUE	forBackprop	Agree	
forClass	FUNCTION	Java	P N	for Class	takes a className as input and returns a ClassTypeDescriptor, reference to a class entity.	This variable takes a className as input and returns a TypeDescriptor representing the specified class. The use of 'for' emphasizes that it is a factory method (returns a typedescriptor for a specific class) and/or that it is specialized for class types (as opposed to primitive types, there is also a forPrimitives functionc all).	Purpose / Role Annotation	TRUE	76	TRUE	forClass	Agree	
forClient	FUNCTION	Java	P N	for Client	represents a configuration entity	This variable is a function that creates a configuration file with server-specific configuration options disabled. The use of 'for' helps convey that it is generated a config for a particular purpose, so some options that are irrelevant to that purpose will be disabled	Purpose / Role Annotation	TRUE	76	TRUE	forClient	Agree	
forImplementation	FUNCTION	Java	P N	for Implementation	references Visibility	This variable is a function that returns a level of visibility (which is an enum). Package, private, public, or same. The use of 'for' indicates that this function returns the visibility for a particular impementation. That is, it emphasized the implementation-specific behavior of the function; providing the ENUM for the implementation specific visibility passed in as its argument.	Purpose / Role Annotation	TRUE	76	TRUE	forImplementation	Agree	
forNumber	FUNCTION	Java	P N	for Number	references the DataMode enum and its possible values	This variable returns the enum associated with a numeric wire value given as a parameter. The word 'for' indicates the fact that it is returning the enum specific to the value it takes as a parameter-- that is, the enum relevant 'for' the value.	Purpose / Role Annotation	TRUE	76	TRUE	forNumber	Agree	
forResource	FUNCTION	Java	P N	for Resource	interacts with ClassLoader, URL, and a Set<URL> to retrieve and return resources	This variable interacts with ClassLoader, URL, and a Set<URL> to retrieve and return resources. It retrieves URLs for a specific resource, using the word 'for' to specify that it is retreiving values associated with the thing it's next to (forX where X is resources)	Purpose / Role Annotation	TRUE	76	TRUE	forResource	Agree	
forSocks4Proxy	FUNCTION	Java	P NM N	for Socks4 Proxy	creating a ProxyInfo object for a SOCKS4 proxy	This variable constructs a proxyInfor instance specifically for SOCKS4 proxy. The use of 'for' indicates the intended use or suitability-- that is, it indicates that it is configuring the object that it returns to work specifically with the SOCKS4 proxy	Purpose / Role Annotation	TRUE	32	TRUE	forSocks4Proxy	Agree	
forUnknownSchema	PARAMETER	Java	P NM N	for Unknown Schema	boolean flag seems to change how the MetadataUtils.newScalar function behaves	This variable is helping to build or adapt a schema definition for the case when the overall schema is unknown. It's a boolean variable that adjusts the schema being created. The use of 'for' helps indicate its purpose or target context-- in this case, when the schema is unknown.	Operation Basis / Strategy	TRUE	32	TRUE	forUnknownSchema	Disagree	Boolean Flow / Control Flag
forward_time_per_layer	DECLARATION	C++	NM N P N	forward time per layer	Not sure	This variable is a vector that stores the total forward pass time for each layer in a neural network, accumulated across iterations. The preposition, 'per' indicates that the measurement is partitioned by or indexed over a certain delta-- in this case, layers. It helps encode the structure of the measurement and that we are performing layer-wise performance calculations	Unit-Based Decomposition / Measurement	TRUE	9	TRUE	forward_time_per_layer	Agree	
fp_on	ATTRIBUTE	C++	N P	fp on	track a specific state of a tree node	This variable is a boolean that indicates whether first path logic is currently active. The use of 'on' indicates activity. Whether this flag is currently active and influencing the execution of the code in some way	Boolean Flow / Control Flag	TRUE	11	TRUE	fp_on	Agree	
friend_in_close	FUNCTION	C	N P N	friend in close	searching for a friend in the close list and returning an index	This variable is a function that finds the index of a friend in a special list (the close list). The word 'in' helps specify a location to contextualize the behavior of the function	Position / Ordering in Time or Space	TRUE	16	TRUE	friend_in_close	Agree	
from	PARAMETER	C	P	from		This variable is used in the context of a markov model and represents the current state out of which the computation will transition. The use of 'from' indicates a source-destination relationship, where from is the source (the current state) and to is the destination (the target state)	Data Source / Origin	TRUE	10	TRUE	from	Agree	
from_context	PARAMETER	C	P N	from context	Not sure	this variable represents the current or previous thread context that is being switched from. It impies that the variable refers to the context being left behind as the thread manager transitions to the next context, thus the word 'from'	Data Source / Origin	TRUE	76	TRUE	from_context	Agree	
from_id	PARAMETER	C	P N	from id	Not sure	This variable represents the node ID of a sender. It's part of a Distributed Hash Table implementation. It's part of a function called DHT_getnodes, which calls another getnodes function. the variable, from_id, identifies who made the request and prevents returning information about the requestor itself. The use of 'from' indicates that this identifier comes from the requesting node. 'from' is a hint about the source of the id.	Data Source / Origin	TRUE	76	TRUE	from_id	Agree	
fromDockerConfig	ATTRIBUTE	Java	P NM N	from Docker Config	holds the state of whether the configuration comes from a Docker config file	This variable is a boolean that holds the state of whether the configuration comes from a Docker config file. The use of 'from' specifies a source-destination relationship. When the variable is true, the source is a DockerConfig.	Boolean Flow / Control Flag	TRUE	32	TRUE	fromDockerConfig	Agree	
fromEmail	PARAMETER	Java	P N	from Email	represents the sender of the email, reference to an external entity.	This variable represents the sender of the email, reference to an external entity. It is the email address of the sender of the email	Data Source / Origin	TRUE	76	TRUE	fromEmail	Agree	
fromHeader	ATTRIBUTE	Java	P N	from Header	Not sure	This variable is a SIP (Session Initiation Protocol) header that identifies the originating user or entity in a SIP request. the word 'from' follows the from_x pattern we see in other identifiers, where it specifies the source of a request/action/resource.	Data Source / Origin	TRUE	76	TRUE	fromHeader	Agree	
fromInclusive	PARAMETER	Java	P N	from Inclusive		This variable is part of a NavigableSet implementation. fromInclusive is a boolean specifying whether fromElement is included or excluded in the subset. The use of 'from' identifies whether the 'from' boundary should be included or excluded. It is used alongside another variable that uses 'to'-- that is, 'from' ... 'to', thus this also helps identify the fact that we are dealing with a range; a source and destination; a span of sorts that is created by filtering a set based on the true or false condition of fromInclusive.	Boolean Flow / Control Flag	TRUE	76	TRUE	fromInclusive	Agree	
fromIterator	FUNCTION	Java	P N	from Iterator	method applies a functional transformation (Function<? super F, ? extends T> function)	this variable is a method that applies a functional transformation (Function<? super F, ? extends T> function). The name is a reference to the fact that the iterator points to a source. From also seems to imply more of an action (a transformation) versus other options for naming, like sourceIterator.	Data Source / Origin	TRUE	76	TRUE	fromIterator	Agree	
fromJID	PARAMETER	Java	P N	from JID		This variable is the JID of who the message came from. Thus, it's the JID of the source or requestor.	Data Source / Origin	TRUE	76	TRUE	fromJID	Agree	
fromKey	PARAMETER	Java	P N	from Key	the method uses it as a reference to select elements from a subset of the collection starting at fromKey	this variable represents the key of a source container (a map)	Data Source / Origin	TRUE	76	TRUE	fromKey	Agree	
fromRoomFilter	ATTRIBUTE	Java	P NM N	from Room Filter	holds a reference to a StanzaFilter object	This variable is a filter that matches stanzas sent from a groupchat or one of the occupants of a groupchat. The 'from' specifies a source-destination relationship, where the source of the stanzas is the groupchat or groupchat occupants.	Data Source / Origin	TRUE	32	TRUE	fromRoomFilter	Agree	
fromServer	PARAMETER	Java	P N	from Server	determines how the packet should be routed	This variable true if the packet was created by the server. This packets should always be delivered. So it helps identify the source of the packet.	Data Source / Origin	TRUE	76	TRUE	fromServer	Agree	
fromY	PARAMETER	Java	P N	from Y	determines the starting point of the animation	This variable determines the starting point of the animation. It moves an element from a y position to a y position. Thus the use of 'from' helps identify a starting position, and 'to' is the ending position	Data Source / Origin	TRUE	76	TRUE	fromY	Agree	
group_with	FUNCTION	C++	V P	group with	defines an operation where one group of textures is linked to another	This variable is a function that indicates a dependency of the calling object's group on some other group. Textures assigned to this group may be considered reasssigned if they are placed in the other group. The use of 'with' indicates membership or grouping, and is a dangling preposition where the right hand side (the thing being grouped with) appears in the argument/parameters of the function.	Configuration / Grouping Context	TRUE	11	TRUE	group_with	Agree	
im2col	PARAMETER	C++	N P N	im 2 col	determines whether the function should perform the im2col operation	This variable handles transformations for images to columns. The 2 behaves like the preposition 'to', which is common for code that deals with transformations or translations between data structures or configurations	Type Casting / Interpretation	TRUE	16	TRUE	im2col	Agree	
in_best_path	ATTRIBUTE	C++	P NM N	in best path	indicates whether the current_node is in the best path during the execution of the algorithm	This variable is a boolean being used in a graph processing algorithm. It indicates whether the current_node is in the best path based on some criteria over the graph structure. The use of 'in' helps affirm that the processes is on the best path through the graph.	Boolean Flow / Control Flag	TRUE	32	TRUE	in_best_path	Agree	
in_neighbour_heap	ATTRIBUTE	C++	P NM N	in neighbour heap	tracks whether a Cell is in the neighbor heap, seems to affecting the algorithm behavior	This variable helps indicate whether a partition cell is present in a neighbor heap, which is probably a reference to the heap data structure. The use of 'in' indicates a general location, that the data is inside of another place.	Location-Bound Membership	TRUE	32	TRUE	in_neighbour_heap	Agree	
index_as_child	ATTRIBUTE	C++	V P N	index as child	maintains the hierarchical position of a beam entry within the beam search structure	This variable represents a beam index. It is an index into lookup, pointing to the parent entry's child_list. If this beam entry is a child of another, index_as_child gives the index into the lookup structure for that relationship. It is used to access lookup information about overlapping beams that share a parent. The use of 'as' indicates an interpretation or view of the data based on some context (as a parent, as a child).	Type Casting / Interpretation	TRUE	15	TRUE	index_as_child	Agree	
index_as_parent	ATTRIBUTE	C++	V P N	index as parent	maintains the hierarchical position of a beam entry within the beam search structure by tracking its parent index	This variable represents a beam index. It is the start of the range in lookup containing children of the entry at that index. The use of 'as' indicates an interpretation or view of the data based on the context (as a parent, as a child)	Type Casting / Interpretation	TRUE	15	TRUE	index_as_parent	Agree	
inEclipseCompiler	ATTRIBUTE	Java	P NM N	in Eclipse Compiler	tracks whether the current processing environment is using the Eclipse compiler	This variable is a boolean flag used to detect if annotation processing is being run under the eclipse compiler. The use of 'in' implies the environment or context being operated in-- specificaly, that we are using, or within, the eclipse compiler. It's like saying that processing is in a certain mode.	Boolean Flow / Control Flag	TRUE	32	TRUE	inEclipseCompiler	Agree	
inLiteral	DECLARATION	Java	P N	in Literal	keeps track of whether the current parsing process is inside a literal text section	This variable is a boolean that keeps track of whether the current parsing process is inside a literal text section. Thus, the preposition is asking a question about the parsing position/state	Boolean Flow / Control Flag	TRUE	76	TRUE	inLiteral	Agree	
inMemCount	PARAMETER	Java	P NM N	in Mem Count	tracks the number of incoming batches currently held in memory	This variable tracks the number of incoming batches currently held in memory. The use of 'in' helps specify a general location-- that the batches are being held in memory.	Position / Ordering in Time or Space	TRUE	32	TRUE	inMemCount	Agree	
inOuterList	ATTRIBUTE	Java	P NM N	in Outer List	tracks whether the reader is currently inside an outer list while processing JSON data	This variable is a boolean that tracks whether the reader is currently inside an outer list while processing JSON data. It is true when the reader is currently in a situation where it is unwrapping an outer list. The use of 'in' indicates a general location, or state, within an outerList	Boolean Flow / Control Flag	TRUE	32	TRUE	inOuterList	Agree	
insert_at	PARAMETER	C++	V P	insert at	specifies the position in the menu where a new item should be inserted	This variable specifies the position in the menu where a new item should be inserted. The use of 'at' indicates a position within the menu where something should be inserted, thus it helps indication position/locationl.	Position / Ordering in Time or Space	TRUE	11	TRUE	insert_at	Agree	
inTransaction	DECLARATION	C	P N	in Transaction	tracks whether the function has successfully started a transaction	This variable is a boolean that tracks whether the function has successfully started a transaction. I tracks the state of a computation.	Boolean Flow / Control Flag	TRUE	76	TRUE	inTransaction	Agree	
kIm2Col	DECLARATION	C++	NM N P N	k Im 2 Col	Not sure	This variable is a mode flag passed to a shared internal function. It tells the shared core whether it should perform an image-to-column operation. Similar to other im2col examples, the 2 is 'to' and indicates the use of transformation or reinterpretation between types (im to col).	Type Casting / Interpretation	TRUE	9	TRUE	kIm2Col	Agree	
message_after_mod	ATTRIBUTE	C	N P N	message after mod	message after modifications have been applied, tracking the state of the message at a particular stage of processing	This variable represents a c-string, message, after modifications have been applied, tracking the state of the message at a particular stage of processing. The word 'after' provides temporal context for the formatting or state of the message; it is the message after applied modifications.	Position / Ordering in Time or Space	TRUE	16	TRUE	message_after_mod	Agree	
message_before_mod	ATTRIBUTE	C	V P N	message before mod	stores the original state of a message before any transformations or modifications occur	This variable represents a c-string, message, before modifications have been applied, tracking the state of the message at a particular stage of processing. The word 'before' provides temporal context for the formatting or state of the message; it is the message after applied modifications.	Position / Ordering in Time or Space	TRUE	15	TRUE	message_before_mod	Agree	
minus	PARAMETER	Java	P	minus	not sure, logical operation in a query execution plan, trigger a process or event when executed	This variable reresents a relational node performing set operations (SQL EXCEPT CLAUSE)  between input relations. It removes rows from the first input if those rows appear in the second (that's the SQL behavior). The use of minus encodes a behavioral role of performing subtraction between inputs.	Operation Basis / Strategy	TRUE	10	TRUE	minus	Agree	
n_from	PARAMETER	C++	N P	n from	tracks the content of the MapNode and  used to generate the result after performing certain transformations	This variable tracks the content of the MapNode and  used to generate the result after performing certain transformations. In particular, this variable represents a source / destination relationship, where n_from is the source that they draw content from, check it, and then set the content based on equality.	Data Source / Origin	TRUE	11	TRUE	n_from	Agree	
notified_on	ATTRIBUTE	C	V P	notified on	Not sure	This variable is used for notification tracking, it indicates where/when/under what conditions the notification happened. Other functions using this variable update system records to reflect that a notification has been issued on certain states. The 'on' indicates whether a notification has happened, and is used in some ways like a flag to note that an activity has taken place (in this case, the notification)	Boolean Flow / Control Flag	TRUE	11	TRUE	notified_on	Agree	
obsess_over_host	PARAMETER	C	V P N	obsess over host	influences how frequently the system checks or logs information about a host	This variable is a boolean flag that essentially controls whether to use more intense scrutiny, logging, or tracking when performing host check processing. The use of 'over' is interesting because it primarily directs the reader's attention and underscores the fact that they are going above and beyond to make certain nothing strange is happening/present in the data they're analyzing.	Boolean Flow / Control Flag	TRUE	15	TRUE	obsess_over_host	Agree	
on_disk	ATTRIBUTE	C	P N	on disk	tracks the state of the index	This variable is used like a boolean (in C) and is specifically used to track whether an index is on disk or not. It's asking a question-- is it on the disk?	Boolean Flow / Control Flag	TRUE	76	TRUE	on_disk	Agree	
on_multipart_header_field	ATTRIBUTE	C	P NM NM N	on multipart header field	referencing an entity in the context of multipart headers	This variable represents a call back that triggers when it received a multipart header field. The use of 'on' indicates the event-driven nature, where there's typically some trigger related to the text after 'on' in the identifier name.	Event Callback / Trigger	TRUE	8	TRUE	on_multipart_header_field	Agree	
on_query_string	ATTRIBUTE	C	P NM N	on query string	handling the query string	This variable represents a call back, which is called under a specific trigger. The use of 'on' indicates the use of event-driven behavior, and implies a trigger of some kind that causes the callback to be used	Event Callback / Trigger	TRUE	32	TRUE	on_query_string	Agree	
on_reason	ATTRIBUTE	C	P N	on reason	it is triggered during HTTP response	This is a callback that is triggered during HTTP response. The use of on indicates that it is part of some event handling (e.g., it is called/read/mutated when something happens)	Event Callback / Trigger	TRUE	76	TRUE	on_reason	Agree	
on_request_response	FUNCTION	C	P NM N	on request response	performs an action: handling the response to an HTTP request by writing data to a connection	This variable is a callback that is invoked when a response is ready for a request. The use of 'on' reflects event-driven behavior and implies a trigger of some kind that causes the callback to be used.	Event Callback / Trigger	TRUE	32	TRUE	on_request_response	Agree	
on_start	FUNCTION	C++	P N	on start		This is a callback that triggers when specific criteria are met. In this case, on_start is the initial callback that deals with startup processing. The use of 'on' indicates the event-driven nature of the function.	Event Callback / Trigger	TRUE	76	TRUE	on_start	Agree	
on_start_	ATTRIBUTE	C++	P N	on start		This is a callback that triggers when specific criteria are met. In this case, on_start is the initial callback that deals with startup processing. The use of 'on' indicates the event-driven nature of the function. It interacts with the other on_start function that we analyzed earlier, repersenting a protected attribute that contains the address of the other on_start function	Event Callback / Trigger	TRUE	76	TRUE	on_start_	Agree	
on_status	ATTRIBUTE	C	P N	on status	is executed when an HTTP status line is encountered during parsing	This is a callback that is executed when an HTTP status line is encountered during parsing. The use of 'on' indicates the event-driven nature of the function.	Event Callback / Trigger	TRUE	76	TRUE	on_status	Agree	
onIngressError	FUNCTION	C++	P NM N	on Ingress Error	handling an ingress error in an HTTP session	This variable represents a callback. It is triggered on a particualr type of error. The use of 'on' reflects event-driven behavior and implies a trigger that causes the callback to be used.	Event Callback / Trigger	TRUE	32	TRUE	onIngressError	Agree	
onPingReplyLatency	FUNCTION	C++	P NM NM N	on Ping Reply Latency	action to be taken when a ping reply latency is received	This variable is a function that gets called when the system measures the latency of a ping response. The use of 'on' indicates that this follows event-driven behavior where there's some trigger that causes the call back function to run.	Event Callback / Trigger	TRUE	8	TRUE	onPingReplyLatency	Agree	
onQueryCurrentThread	FUNCTION	C++	P NM NM N	on Query Current Thread	tracks the state of the current thread in a process	This variable is a function that is run when a QueryCurrentThread request happens. The use of 'on' indicates that this is an even-driven call back that happens when a certain trigger (typically related to the text after on) is tripped.	Event Callback / Trigger	TRUE	8	TRUE	onQueryCurrentThread	Agree	
onResponseContent	FUNCTION	Java	P NM N	on Response Content	handling response content for a request	This variable is a function that represents an event listener / callback. It triggers when certain content is received, although this method is empty. The use of 'on' reflects event-driven behavior and implies a trigger that causes the callback to be used.	Event Callback / Trigger	TRUE	32	TRUE	onResponseContent	Agree	
onServerSide	PARAMETER	C++	P NM N	on Server Side	store whether the PrivateKeyPassphraseHandler is operating on the server side	This variable stores whether the PrivateKeyPassphraseHandler is operating on the server side. It is a boolean, and thus is asking a question about whether something is on the server side or not. In this context, on is very much communicating a location or execution context.	Boolean Flow / Control Flag	TRUE	32	TRUE	onServerSide	Agree	
onShutdownRequest	FUNCTION	Java	P NM N	on Shutdown Request	describes an action related to handling a shutdown request	This variable is a function that represents and event listener / callback. It triggers when a shutdown request is made. The use of 'on' reflects event-driven behavior and implies a trigger that causes the callback to be used	Event Callback / Trigger	TRUE	32	TRUE	onShutdownRequest	Agree	
onTick	FUNCTION	Java	P N	on Tick	reacts to an event (the ticking of the timer)	This variable represents a function tha tis used as a callback. The onTick function acts as a timekeeper, updating pollable and controller objects with the current time. The use of 'on' indicates the event-driven nature of the function.	Event Callback / Trigger	TRUE	76	TRUE	onTick	Agree	
onTransportReadyCommon	FUNCTION	C++	P NM NM N	on Transport Ready Common	tracks the state of the transport session, and performs actions to set it up	This variable is a function that is called when the QUIC transport becomes read. It initializes connection info and sets up protocol features. The use of 'on' indicates that it is an event-driven function that has a trigger when some condition or event is met.	Event Callback / Trigger	TRUE	8	TRUE	onTransportReadyCommon	Agree	
orFilterAtIndex	FUNCTION	Java	NM N P N	or Filter At Index		This variable is a function that constructs a logical OR filter from two DruidFilter objects, probably as part of a filter composition at a sepcific index or stage in query planning. The use of 'at' specifies a position or location within the data structure.	Position / Ordering in Time or Space	TRUE	9	TRUE	orFilterAtIndex	Agree	
over_size	DECLARATION	C++	P N	over size	Not sure	This variable represents the excess portion of a block that goes beyond the end of the file on S3. It's how much it overshoots the real file size. It is used to determine when extra space is needed. The use of 'over' indicates a surplus, reminder, or excess	Mathematical / Constraint Context	TRUE	76	TRUE	over_size	Agree	
pass_through	DECLARATION	C++	V P	pass through	track whether the texture name should be passed through	This is a boolean variable that helps us determine whether the texture name should be passed through. It's a filtering or transformation control flag where they are asking whether a texture name can be used as-is (passed through) or if they need to rewrite it. It gatekeeps. 'Through' here kind of helps you understand wha tthe if statement logic is doing (allowing or not allowing), since that is the idea of passing through.	Boolean Flow / Control Flag	TRUE	11	TRUE	pass_through	Agree	
pastThreshold	DECLARATION	Java	P N	past Threshold	holds a list of timestamps that are above a calculated threshold	This variable is a list of failure timetamps that occurred after the threshold timestamp, which is computed based on how many minutes ago a threshold cooldown period should be evaluated. pastThreshold is the subset of failures that re recen enough to be counted toward triggering cooldown behavior. The use of 'past' indicates a temporal relationship, indicating that these happened after a certain time boundary	Event Callback / Trigger	TRUE	76	TRUE	pastThreshold	Agree	
plugin_name_for_upgrade	ATTRIBUTE	C	NM N P N	plugin name for upgrade	stores the plugin name when plugins are not loaded during an upgrade	This variable stores the plugin name when plugins are not loaded during an upgrade. The use of 'for' tells us what the plugin name refers to; the context for the purpose of the plugin.	Purpose / Role Annotation	TRUE	9	TRUE	plugin_name_for_upgrade	Agree	
ptr_to_handle	FUNCTION	C++	N P N	ptr to handle	converting a pointer into a MATLAB handle	This variable is a function that converts a c++ pointer into a MATLAB handle. The 'to' indicates this conversion.	Type Casting / Interpretation	TRUE	16	TRUE	ptr_to_handle	Agree	
select_in_word	FUNCTION	C	V P N	select in word	describes an operation that selects a bit position within a word	This variable is a function that performs bit-level selection within a 64-bit word. Word is a bitfield, and k (within the function) selects the position of the kth set bit. The idea here is to compute the position of the kth set bit within a 64-bit word; the use of 'in' indicates containment or scope. It specifies the location of the data that is to be selected from.	Location-Bound Membership	TRUE	15	TRUE	select_in_word	Agree	
send_to_buffer	PARAMETER	C	V P N	send to buffer	affects the behavior of how the trigger list is processed	This is a boolean flag controlling whether output is sent as a command or inserted into the buffer as input text. The function it is in generates a dynamic string summary of active triggers, and send_to_buffer determines how that string is used. In this context, 'to' specifies a directionality or destination. The buffer is the target recipient of some data.	Data Movement / Transfer	TRUE , also fits boolean flow / control flag?	15	TRUE	send_to_buffer	Disagree	Boolean Flow / Control Flag
set_by	DECLARATION	C	V P	set by	holds various states: command (cmd), hint (hint), and flags (flags)	This variable holds various states: command (cmd), hint (hint), and flags (flags). It represents how something was set and who/what caused it to be set. In this case, by indicates a form of traceability about how it was set/what set it.	Boolean Flow / Control Flag	TRUE	11	TRUE	set_by	Agree	
shift_by	PARAMETER	C	V P	shift by	tracks the change in line numbers as they are shifted	This variable indicates the number of lines that a hunk should be shifted by in the function that it is a parameter for. The word 'by' is a dangling preposition that is used to seemingly indicate that this variable somehow represents the amount of shifting that should occur. The missing right hand side of the preposition is the value of the variable itself.	Operation Basis / Strategy	TRUE	11	TRUE	shift_by	Agree	
showStringforAdd	DECLARATION	Java	NM N P N	show String for Add	string used for adding contacts or groups	This variable represents a string of contacts or groups that are then added to a menu item. The use of 'for' gives us context for the purpose of the showString, it identifies the purpose and contents of the string.	Purpose / Role Annotation	TRUE	9	TRUE	showStringforAdd	Agree	
size_from_ipv4	DECLARATION	C	N P N	size from ipv4	track the state of packet processing	This variable represents the number of bites remaining after the IPV4 header begins; it's the size of the payload. The us eof 'from' is spatial, in that it expresses an offset-- the size of the data starting at the IPV4 header.	Data Source / Origin	TRUE	16	TRUE	size_from_ipv4	Agree	
size_in_datum	DECLARATION	C++	N P N	size in datum	tracks the size of data stored in Datum at different iterations	This variable represents the number of elements in a single Datum-- how much image data is stored in the given record. It is the number of elements in datum, which is a strange way to word this identifier. Even so, 'in' is used to help the developer understand that this is the size contained within a container.	Unit-Based Decomposition / Measurement	TRUE	16	TRUE	size_in_datum	Agree	
solve_via_gs	FUNCTION	C++	V P N	solve via gs	performs the action of solving a system using the gauss-seidel method	This variable is a function that solves a system using the gauss-seidel method. The word 'via' is a way of specifying a means or path taken to solve a problem. It could be read as 'by means of' to help indicate how the problem is being solved. It also seems to imply the presence of other potential solutions, using via to indicate the available options.	Operation Basis / Strategy	TRUE	15	TRUE	solve_via_gs	Agree	
str2int	FUNCTION	C	N P N	str 2 int	converting a string to an integer	This variable is a function for converting a string to an integer. The 2 represents the word 'to' and conveys the act of conversion or reinterpretation	Type Casting / Interpretation	TRUE	16	TRUE	str2int	Agree	
stream_for	FUNCTION	C++	V P	stream for	retrieving a stream for a specific document	This variable is a functon that retreives a stream for a specific document. The word 'for' is a dangling preposition that indicates the target of the verb-- it's the thing for which we are retrieving the stream. It's dangling because the actual target is in the function paramters (doc_id)	Purpose / Role Annotation	TRUE	11	TRUE	stream_for	Agree	
subexp_to	ATTRIBUTE	C	N P	subexp to	Not sure	This represents the ending string index of a subexpression match. It is used as a terminus for, for example, indexing a for loop that goes from some starting point to the subexp_to (which is the end of the match). The use of 'to' indicates a range or a destination or a span between boundaries.	Data Movement / Transfer	TRUE	11	TRUE	subexp_to	Agree	
TforDeser	DECLARATION	C++	N P N	T for Deser	represents a transaction that controls how the interpreter handles deserialization	This variable represents a transaction that controls how the interpreter handles deserialization. It is primarily used to guard or manage deserialization side effects while parsing. The use of for helps specify intent; the transaction is to be used to support/protect the process of deserialization	Boolean Flow / Control Flag	TRUE	16	TRUE	TforDeser	Agree	
threadBtoA	ATTRIBUTE	Java	NM N P N	thread B to A	Not sure	This variable is the execution thread responsible for relaying network packets from host B to host A. The word 'to' acts as a directional modifier, helping us understand how information flows between these two hosts through this variable.	Data Movement / Transfer	TRUE	9	TRUE	threadBtoA	Agree	
to_cs	PARAMETER	C++	P N	to cs	named entity within the transformation logic	This variable represents the coordinate system that will be used as a target coordinate system. It is the coordinate system that the transformation should convert animation data to. The word 'to' indicates the change in system or formatting, from the old to the new.	Type Casting / Interpretation	TRUE	76	TRUE	to_cs	Agree	
to_height	DECLARATION	C++	P N	to height	a reference to a specific measurement in the graphical interface.	This variable represents a numeric range in the graphs corrdinate space, where the purpose of the code is generally to convert from pixel coordinates to height units. The variable, to_height is part of a range descriptor, where we are moving from one height to another. For example, from_height is the start of a vertical range, and to_height is the end.	Data Source / Origin	TRUE	76	TRUE	to_height	Agree	
to_merge	DECLARATION	C++	P V	to merge	collects file paths for merging	This variable collects file paths for merging. The use of 'to' indicates that these have not been processed yet and needs to be processed at some point in the future. It helps the programmer understand the intent of the items inside of this collection; they need to be merged at some point.	Deferred Processing / Pending Action	TRUE	14	TRUE	to_merge	Agree	
to_repo	PARAMETER	C	P N	to repo	represents a path to a Git repository that is being written as a Git link	This variable is a target repository path that the function should link to from in_dir. It indicates that the function is writing a link to this repository path. To identifies the destination, and gives some idea of directionality from a source to a destination.	Data Movement / Transfer	TRUE	76	TRUE	to_repo	Agree	
to_write	DECLARATION	C++	P V	to write	determines how many records to write from each chunk	This variable determines how many records to write from each chunk. It holds the number of records that should be read from a given chunk j, to be appended to the current output buffer. The records are then written to several output partitions. This contains records that need to be written-- the 'to' expresses intent, that these are going to be written out.	Deferred Processing / Pending Action	TRUE	14	TRUE	to_write	Agree	
toAck	DECLARATION	C++	P N	to Ack	represents the number of insertions in the table that need ack	This variable is the number of entries in the QPACK table that have been inserted, but not acknowledged. These are the number of insertions the decoder still needs to acknowledge to the encoder. This means that the to is specifying that these still need to be acknowledged; these are waiting to be processed.	Deferred Processing / Pending Action	TRUE	76	TRUE	toAck	Agree	
toAggregate	DECLARATION	Java	P V	to Aggregate	holds the data to be processed in the aggregation operation	This variables holds the data to that will be aggregated or is designated for aggregation. The use of 'to' emphasizes where the object stands in its lifecycle-- before aggregation. It also emphasizes intent, that this data will be aggregated.	Deferred Processing / Pending Action	TRUE	14	TRUE	toAggregate	Agree	
toAlloc	PARAMETER	Java	P V	to Alloc	represents a resource that is being allocated	This variable represents a valuvector whose purpose is to allocate space. It is used to invoke allocation methods. The use of to indicates an intent to perform allocation.	Deferred Processing / Pending Action	TRUE	14	TRUE	toAlloc	Agree	
toBareJID	FUNCTION	Java	P NM N	to Bare JID	refers to a JID	This variable is a function that returns a string version of a JID for the calling object. The use of 'to' implies transformation or interpretation of some object as another type or format.	Type Casting / Interpretation	TRUE	32	TRUE	toBareJID	Agree	
toConsume	PARAMETER	C++	P V	to Consume	describes how many bytes should be consumed from the stream	This variable represents how many bytes should be consumed from the stream. The use of 'to' indicates intention; that this number represents the number of bytes the consume at the appropriate time in the (presumably near) future.	Deferred Processing / Pending Action	TRUE	14	TRUE	toConsume	Agree	
toCount	PARAMETER	Java	P N	to Count	a reference to a specific entity (DataType)	This variable represents the data type to get counts for. If you read it along with its type, it becomes 'data type to count'. So 'to' is specifying that these still need to be processed/counted	Deferred Processing / Pending Action	TRUE	76	TRUE	toCount	Agree	
toDelete	FUNCTION	Java	P V	to Delete	describes an operation to delete data	This variable represents data(filters) that are slated to be deleted. The use of 'to' indicates intent or purpose; that the items being returned by this function need to be deleted.	Deferred Processing / Pending Action	TRUE	14	TRUE	toDelete	Agree	
toElement	PARAMETER	Java	P N	to Element	it represents a specific element (of type C), and it is used to determine which subset of elements should be included in the resulting ContiguousSet	This vairable represents a specific element (of type C), and it is used to determine which subset of elements should be included in the resulting ContiguousSet. The use of 'to' indicates a source-destination relationship, where to is the destination, and the other variable, fromElement, is the source. It could also be seen as a range, where from is the start and to is the end point	Type Casting / Interpretation	TRUE	76	TRUE	toElement	Agree	
toFieldList	FUNCTION	Java	P NM N	to Field List	returns a list of MaterializedField objects	This variable is a function that converts a ColumnMetadata collection to MaterializedField collection. The use of 'to' implies the conversion or interpretation of an object from one type to another.	Type Casting / Interpretation	TRUE	32	TRUE	toFieldList	Agree	
toFilename	FUNCTION	Java	P N	to Filename	represents a transformation of a TypeElement into a filename	This variable represents a transformation of a TypeElement into a filename. The use of 'to' indicates this transformation relationship between the element type and a string.	Type Casting / Interpretation	TRUE	76	TRUE	toFilename	Agree	
toHashFieldExp	DECLARATION	Java	P NM NM N	to Hash Field Exp	generating expressions to retrieve values from fields for hashing	This variable names a ValueVectorReDExpression that targets a field which will be hashed. So it's an expression used to compute a hash for a given field. The use of 'to' captures the transformation or conversion aspect of this variable, which produces a hash expression from a field.	Data Movement / Transfer	also type casting / intrepretation?	8	TRUE	toHashFieldExp	Agree	
toHeader	DECLARATION	Java	P N	to Header		This variable represents the destination header. It's the recipient of the SIP request. It specifies a directional relationship from source to destination	Data Movement / Transfer	TRUE	76	TRUE	toHeader	Agree	
toIndex	DECLARATION	Java	P N	to Index	Not sure (an integer used for indexing but not reference any entity)	This represents the end of a range that should be used to create a sublist from a larger list, called results. The fromIndex variable nearby represents the start of the range, and toIndex is the end of the range.	Data Movement / Transfer	TRUE	76	TRUE	toIndex	Agree	
toLaunch	DECLARATION	Java	P V	to Launch	represents a list of tasks that are about to be launched	This variable represents a list of tasks that will be launched. The use of 'to' indicates intent or purpose; that the items in this list need to be launched.	Deferred Processing / Pending Action	TRUE	14	TRUE	toLaunch	Agree	
toMerge	PARAMETER	Java	P V	to Merge	describes the metadata that is in the process of being merged	This variable describes the metadata that will be merged. The use of 'to' indicates intent or purpose; an operation that will take place in the future, or is slated to take place in the future.	Deferred Processing / Pending Action	TRUE	14	TRUE	toMerge	Agree	
toRegister	PARAMETER	Java	P V	to Register	represents an operator that is in the process of being registered	This variable represents an operator placed inside of the sourceOperatorRegistry as part of the process of being registred. The use of 'to' indicates intent or purpose; the objects in this collection will need to be registered at some point in the future	Deferred Processing / Pending Action	TRUE	14	TRUE	toRegister	Agree	
toSchema	FUNCTION	Java	P N	to Schema	schema representation	This variable is a function that converts a StructType into a TupleMetadata object, which probably represents an executable schema. The word 'to expresses transformation, or conversion, from one type to another. It transforms between representations.	Type Casting / Interpretation	TRUE	76	TRUE	toSchema	Agree	
toSortFn	DECLARATION	Java	P NM N	to Sort Fn	generates Bson objects representing sorting operations	This variable represents a function that performs a transformation from a Collation to a Bson object. 'to' is a reference to the fact that it is producing a sort clause-- a function for sorting. This function will perform a transformation. Not the best name, but the use of to is consistent with prior examples.	Type Casting / Interpretation	TRUE	32	TRUE	toSortFn	Agree	
toTime	PARAMETER	Java	P N	to Time	likely used for indexing time-based data	This variable is a time-based upper bound, a point in time up to which the function should sum values from a set of buckets. The word 'to' affirms the temporal boundary. It expresses the point in time up to which we include data.	Position / Ordering in Time or Space	TRUE	76	TRUE	toTime	Agree	
toVisit	ATTRIBUTE	Java	P V	to Visit	maintains a queue of classes that still need to be visited	This variable maintains a queue of classes that still need to be visited. The use of 'to' indicates intent or purpose; the objects in this list need to be visited	Deferred Processing / Pending Action	TRUE	14	TRUE	toVisit	Agree	
toYaml	FUNCTION	Java	P N	to Yaml	method converts an object into a YAML string using yamlMapper.writeValueAsString(this)	This variable is a method that converts an object into a YAML string using yamlMapper.writeValueAsString(this). The word 'to' is used in th transformational sense, where it is transforming the object into YAML.	Type Casting / Interpretation	TRUE	76	TRUE	toYaml	Agree	
until	DECLARATION	Java	P	until	Not sure	This variable is used as a boundary marker for a range of elements in a collection (array-like) data structure. It marks the exclusive upper bound index in a collection's value buffer for a given row. It's used to help end iterative constructs like for loops. The use of 'until' indicates a boundary or a limit; a size; a range.	Position / Ordering in Time or Space	TRUE	10	TRUE	until	Agree	
val_from_literal	ATTRIBUTE	C	N P N	val from literal	describes how to convert a literal representation into a structured value	This variable represents values that have been converted from some literal representation into a structured representation. The word 'from' indicates source or origin; the value was obtained from a literal representation.	Data Source / Origin	TRUE	16	TRUE	val_from_literal	Agree	
version_bitmap_from_version	FUNCTION	C	NM N P N	version bitmap from version	mapping a specific version to a bitmap	This variable is a function that returns a bitmask that encodes support for all versions less than or equal to the given version. The use of 'from' indicates a source or a beginning, indicating which version should be the versionf rom which we generate the bitmask. It could be seen as a transformation relationship from some perspective, given that the base version influences how the bitmask is ultimately generated.	Data Source / Origin	TRUE	9	TRUE	version_bitmap_from_version	Agree	
vmax_over_base	DECLARATION	C++	N P N	vmax over base	track a constraint related to integer overflow in the parsing logic	This variable represents the threshold used to prevent overflow during base multiplication. The word 'over' is used in the arithmetical sense of division, where there's a numerator above a denominator. It conveys the fact that this variable represents the results of vmax being divided into base.	Mathematical / Constraint Context	TRUE	16	TRUE	vmax_over_base	Agree	
withCharset	DECLARATION	Java	P N	with Charset	transforms the current instance (MediaType) into a new instance	This variable is a function that returns a new copy of an existing mediaType object except the given charset has been applied. For example, it might return a MediateType with its charset parameter set to utf-8. The word 'with' expresses configuration or inclusion, for example 'give me a version of this media type that includes this charset'.	Type Casting / Interpretation	TRUE	76	TRUE	withCharset	Agree	
withConf	FUNCTION	Java	P N	with Conf	assigning a new Configuration object to this.conf	This variable represents a function that is assigning a new Configuration object to this.conf. It returns the calling object except it uses a different configuration, so the 'with' represents inclusion or configuration.	Configuration / Grouping Context	TRUE	76	TRUE	withConf	Agree	
within	ATTRIBUTE	Java	P	within	describe the scope in which the orderings apply	This variable specifies the field or scope in which an ordering (for the ORDER) operator) should apply, typically used to define grouped sorting. The use of 'within' specifies a scope or containment, a group or group membership. A collection.	Location-Bound Membership	TRUE	10	TRUE	within	Agree	
withSchemaBuilder	FUNCTION	Java	P NM N	with Schema Builder	modifies the internal state by updating the schemaBuilder field	This variable is a function that modifies the internal state by updating the schemaBuilder field. It adds or modifies or changes the schembuilder. The use of 'with' expresses configuration or inclusion.	Configuration / Grouping Context	TRUE	32	TRUE	withSchemaBuilder	Agree	
withSystem	PARAMETER	C++	P N	with System	determines whether system include paths should be considered	This variable is a boolean that determines whether system include paths should be considered. The word 'with' expresses inclusion or configuration.	Boolean Flow / Control Flag	TRUE	76	TRUE	withSystem	Agree	
withUnaryOperator	ATTRIBUTE	Java	P NM N	with Unary Operator	some transformation or computation	This variable applies the withUnaryOperator function from the scheme object and returns the result of apply. So it is applying some kind of transformation via a unary operator. The use of 'with' in this case seems to imply transformation or configuration; transforming data using a unary operator.	Configuration / Grouping Context	also type casting / intrepretation?	32	TRUE	withUnaryOperator	Agree	
wrapped_around	PARAMETER	C++	V P	wrapped around	refers to the behavior or wrapping action being performed on the object	This variable holds a reference to another type that the CPPConstType wraps with a const modifier. It identifies the underlying type that CPPConstType dectorates with const. It's the inner type being wrapped around. The use of 'around' indicates the behavior of encasing an object within another object (or type within another type)	Type Casting / Interpretation	TRUE	11	TRUE	wrapped_around	Agree	
xfrom	PARAMETER	C++	N P	x from	refers to the x-coordinate from which the image data is copied	This variable refers to the x-coordinate from which the image data is copied. The preposition 'from' describes the directionality or source of the operations. It is used in conjunction with 'xto' to create a source-destination relationship.	Data Source / Origin	TRUE	11	TRUE	xfrom	Agree	
xto	PARAMETER	C++	N P	x to	refers to the x-coordinate of the destination boundary within the image	This variable refers to the x-coordinate from which the image data is copied. The preposition 'to' describes the directionality or source of the operations. It is used in conjunction with 'xfrom' to create a source-destination relationship.	Data Movement / Transfer	TRUE	11	TRUE	xto	Agree	